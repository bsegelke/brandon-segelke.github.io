////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//console.log(sum(range(1, 10)));
//Write a range function that takes two arguments, start and end, and returns an array containing all the numbers from start up to (and including) end.


function range(start, end, step) {
  //make empty array to hold values
  let array = []
//if start is same as end return empty []
  if(start === end){
    return []
  }
  //else if there is no step input do a normal range print
  else if(step === undefined){
  for(let i = start; i <= end; i++){
    array.push(i)
  }
  }//if if step is given and positive loop plus step
  else if(step > 0){
    
    for(let y = start; y <= end; y += step)
    array.push(y);
    //if step is negative loop plus negative step
  }else if(step < 0) { 
    
    for(let z = start; z >= end; z += step){
      array.push(z)
    }
  }//return array
  return array
  }

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  let total = 0;
  for(let i = 0; i < array.length; i++){
    total += array[i]
  }
  return total;
  }

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

let reverseArray = (array) => {
  let newArray = [];
  for(let i = 0; i < array.length; i++){
    newArray.unshift(array[i])
  }
  return newArray;
  }

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  let newArray = []
 for(let i = array.length -1; i >= 0; i--){
 newArray.push(array[i])
 }
 for(let y = 0; y < array.length; y++){
   array[y] = newArray[y]
 }
 return array;
 }

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
 let rest = null;
 for( var i = array.length - 1; i >= 0 ; i--){
rest = { value: array[i], rest: rest };

 } return rest
     }

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list, output = []) {
//base
if(list.rest === null){
  output.push(list.value)
return output;
}

//recursion
output.push(list.value);
return listToArray(list.rest, output)
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend() {

}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth() {

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y) {
// determine if x an y are Both no objects
if (typeof x !== 'object' && typeof y !== 'object'){
return x === y;
}
// determine if Either x or y are not an object
if (typeof x !== 'object' || typeof y !== 'object'){
  return false;
}
// create arrays of objects keys
let xKeys = Object.keys(x);
let yKeys = Object.keys(y)
//determine if xKyes and yKeys have different lengths
if( xKeys.length !== yKeys.length){
  return false;
}
// iterate through keys to check if they match
for (let i = 0; i < xKeys.length; i++){
if(!yKeys.includes(xKeys[i]) || !deepEqual(x[xKeys[i]], y[xKeys[i]] )){
return false;
}
}
return true;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
